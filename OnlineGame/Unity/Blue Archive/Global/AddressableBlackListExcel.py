# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Global

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class AddressableBlackListExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AddressableBlackListExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAddressableBlackListExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AddressableBlackListExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AddressableBlackListExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AddressableBlackListExcel
    def FolderPath(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AddressableBlackListExcel
    def FolderPathLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AddressableBlackListExcel
    def FolderPathIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # AddressableBlackListExcel
    def ResourcePath(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AddressableBlackListExcel
    def ResourcePathLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AddressableBlackListExcel
    def ResourcePathIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def AddressableBlackListExcelStart(builder):
    builder.StartObject(3)

def Start(builder):
    AddressableBlackListExcelStart(builder)

def AddressableBlackListExcelAddId(builder, id):
    builder.PrependInt64Slot(0, id, 0)

def AddId(builder, id):
    AddressableBlackListExcelAddId(builder, id)

def AddressableBlackListExcelAddFolderPath(builder, folderPath):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(folderPath), 0)

def AddFolderPath(builder, folderPath):
    AddressableBlackListExcelAddFolderPath(builder, folderPath)

def AddressableBlackListExcelStartFolderPathVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartFolderPathVector(builder, numElems):
    return AddressableBlackListExcelStartFolderPathVector(builder, numElems)

def AddressableBlackListExcelAddResourcePath(builder, resourcePath):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(resourcePath), 0)

def AddResourcePath(builder, resourcePath):
    AddressableBlackListExcelAddResourcePath(builder, resourcePath)

def AddressableBlackListExcelStartResourcePathVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartResourcePathVector(builder, numElems):
    return AddressableBlackListExcelStartResourcePathVector(builder, numElems)

def AddressableBlackListExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return AddressableBlackListExcelEnd(builder)
