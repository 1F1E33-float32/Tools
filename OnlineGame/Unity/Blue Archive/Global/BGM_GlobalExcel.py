# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Global

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class BGM_GlobalExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BGM_GlobalExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBGM_GlobalExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # BGM_GlobalExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BGM_GlobalExcel
    def GroupBgmid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # BGM_GlobalExcel
    def BgmidKr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # BGM_GlobalExcel
    def BgmidJp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # BGM_GlobalExcel
    def BgmidTh(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # BGM_GlobalExcel
    def BgmidTw(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # BGM_GlobalExcel
    def BgmidEn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def BGM_GlobalExcelStart(builder):
    builder.StartObject(6)

def Start(builder):
    BGM_GlobalExcelStart(builder)

def BGM_GlobalExcelAddGroupBgmid(builder, groupBgmid):
    builder.PrependInt64Slot(0, groupBgmid, 0)

def AddGroupBgmid(builder, groupBgmid):
    BGM_GlobalExcelAddGroupBgmid(builder, groupBgmid)

def BGM_GlobalExcelAddBgmidKr(builder, bgmidKr):
    builder.PrependInt64Slot(1, bgmidKr, 0)

def AddBgmidKr(builder, bgmidKr):
    BGM_GlobalExcelAddBgmidKr(builder, bgmidKr)

def BGM_GlobalExcelAddBgmidJp(builder, bgmidJp):
    builder.PrependInt64Slot(2, bgmidJp, 0)

def AddBgmidJp(builder, bgmidJp):
    BGM_GlobalExcelAddBgmidJp(builder, bgmidJp)

def BGM_GlobalExcelAddBgmidTh(builder, bgmidTh):
    builder.PrependInt64Slot(3, bgmidTh, 0)

def AddBgmidTh(builder, bgmidTh):
    BGM_GlobalExcelAddBgmidTh(builder, bgmidTh)

def BGM_GlobalExcelAddBgmidTw(builder, bgmidTw):
    builder.PrependInt64Slot(4, bgmidTw, 0)

def AddBgmidTw(builder, bgmidTw):
    BGM_GlobalExcelAddBgmidTw(builder, bgmidTw)

def BGM_GlobalExcelAddBgmidEn(builder, bgmidEn):
    builder.PrependInt64Slot(5, bgmidEn, 0)

def AddBgmidEn(builder, bgmidEn):
    BGM_GlobalExcelAddBgmidEn(builder, bgmidEn)

def BGM_GlobalExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return BGM_GlobalExcelEnd(builder)
