# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Global

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class BossExternalBTExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BossExternalBTExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBossExternalBTExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # BossExternalBTExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BossExternalBTExcel
    def ExternalBtid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # BossExternalBTExcel
    def Aiphase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # BossExternalBTExcel
    def ExternalBtnodeType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BossExternalBTExcel
    def ExternalBttrigger(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BossExternalBTExcel
    def TriggerArgument(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # BossExternalBTExcel
    def BehaviorRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # BossExternalBTExcel
    def ExternalBehavior(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BossExternalBTExcel
    def BehaviorArgument(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def BossExternalBTExcelStart(builder):
    builder.StartObject(8)

def Start(builder):
    BossExternalBTExcelStart(builder)

def BossExternalBTExcelAddExternalBtid(builder, externalBtid):
    builder.PrependInt64Slot(0, externalBtid, 0)

def AddExternalBtid(builder, externalBtid):
    BossExternalBTExcelAddExternalBtid(builder, externalBtid)

def BossExternalBTExcelAddAiphase(builder, aiphase):
    builder.PrependInt64Slot(1, aiphase, 0)

def AddAiphase(builder, aiphase):
    BossExternalBTExcelAddAiphase(builder, aiphase)

def BossExternalBTExcelAddExternalBtnodeType(builder, externalBtnodeType):
    builder.PrependInt32Slot(2, externalBtnodeType, 0)

def AddExternalBtnodeType(builder, externalBtnodeType):
    BossExternalBTExcelAddExternalBtnodeType(builder, externalBtnodeType)

def BossExternalBTExcelAddExternalBttrigger(builder, externalBttrigger):
    builder.PrependInt32Slot(3, externalBttrigger, 0)

def AddExternalBttrigger(builder, externalBttrigger):
    BossExternalBTExcelAddExternalBttrigger(builder, externalBttrigger)

def BossExternalBTExcelAddTriggerArgument(builder, triggerArgument):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(triggerArgument), 0)

def AddTriggerArgument(builder, triggerArgument):
    BossExternalBTExcelAddTriggerArgument(builder, triggerArgument)

def BossExternalBTExcelAddBehaviorRate(builder, behaviorRate):
    builder.PrependInt64Slot(5, behaviorRate, 0)

def AddBehaviorRate(builder, behaviorRate):
    BossExternalBTExcelAddBehaviorRate(builder, behaviorRate)

def BossExternalBTExcelAddExternalBehavior(builder, externalBehavior):
    builder.PrependInt32Slot(6, externalBehavior, 0)

def AddExternalBehavior(builder, externalBehavior):
    BossExternalBTExcelAddExternalBehavior(builder, externalBehavior)

def BossExternalBTExcelAddBehaviorArgument(builder, behaviorArgument):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(behaviorArgument), 0)

def AddBehaviorArgument(builder, behaviorArgument):
    BossExternalBTExcelAddBehaviorArgument(builder, behaviorArgument)

def BossExternalBTExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return BossExternalBTExcelEnd(builder)
