# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Global

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FieldSceneExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FieldSceneExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFieldSceneExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FieldSceneExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FieldSceneExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldSceneExcel
    def DateId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldSceneExcel
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldSceneExcel
    def ArtLevelPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FieldSceneExcel
    def DesignLevelPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FieldSceneExcel
    def Bgmid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldSceneExcel
    def ConditionalBgmquestId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FieldSceneExcel
    def ConditionalBgmquestIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # FieldSceneExcel
    def ConditionalBgmquestIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldSceneExcel
    def ConditionalBgmquestIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # FieldSceneExcel
    def BeginConditionalBgmscenarioGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FieldSceneExcel
    def BeginConditionalBgmscenarioGroupIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # FieldSceneExcel
    def BeginConditionalBgmscenarioGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldSceneExcel
    def BeginConditionalBgmscenarioGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # FieldSceneExcel
    def BeginConditionalBgminteractionId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FieldSceneExcel
    def BeginConditionalBgminteractionIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # FieldSceneExcel
    def BeginConditionalBgminteractionIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldSceneExcel
    def BeginConditionalBgminteractionIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # FieldSceneExcel
    def EndConditionalBgmscenarioGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FieldSceneExcel
    def EndConditionalBgmscenarioGroupIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # FieldSceneExcel
    def EndConditionalBgmscenarioGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldSceneExcel
    def EndConditionalBgmscenarioGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # FieldSceneExcel
    def EndConditionalBgminteractionId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FieldSceneExcel
    def EndConditionalBgminteractionIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # FieldSceneExcel
    def EndConditionalBgminteractionIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldSceneExcel
    def EndConditionalBgminteractionIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # FieldSceneExcel
    def ConditionalBgmid(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FieldSceneExcel
    def ConditionalBgmidAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # FieldSceneExcel
    def ConditionalBgmidLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldSceneExcel
    def ConditionalBgmidIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

def FieldSceneExcelStart(builder):
    builder.StartObject(12)

def Start(builder):
    FieldSceneExcelStart(builder)

def FieldSceneExcelAddUniqueId(builder, uniqueId):
    builder.PrependInt64Slot(0, uniqueId, 0)

def AddUniqueId(builder, uniqueId):
    FieldSceneExcelAddUniqueId(builder, uniqueId)

def FieldSceneExcelAddDateId(builder, dateId):
    builder.PrependInt64Slot(1, dateId, 0)

def AddDateId(builder, dateId):
    FieldSceneExcelAddDateId(builder, dateId)

def FieldSceneExcelAddGroupId(builder, groupId):
    builder.PrependInt64Slot(2, groupId, 0)

def AddGroupId(builder, groupId):
    FieldSceneExcelAddGroupId(builder, groupId)

def FieldSceneExcelAddArtLevelPath(builder, artLevelPath):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(artLevelPath), 0)

def AddArtLevelPath(builder, artLevelPath):
    FieldSceneExcelAddArtLevelPath(builder, artLevelPath)

def FieldSceneExcelAddDesignLevelPath(builder, designLevelPath):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(designLevelPath), 0)

def AddDesignLevelPath(builder, designLevelPath):
    FieldSceneExcelAddDesignLevelPath(builder, designLevelPath)

def FieldSceneExcelAddBgmid(builder, bgmid):
    builder.PrependInt64Slot(5, bgmid, 0)

def AddBgmid(builder, bgmid):
    FieldSceneExcelAddBgmid(builder, bgmid)

def FieldSceneExcelAddConditionalBgmquestId(builder, conditionalBgmquestId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(conditionalBgmquestId), 0)

def AddConditionalBgmquestId(builder, conditionalBgmquestId):
    FieldSceneExcelAddConditionalBgmquestId(builder, conditionalBgmquestId)

def FieldSceneExcelStartConditionalBgmquestIdVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartConditionalBgmquestIdVector(builder, numElems):
    return FieldSceneExcelStartConditionalBgmquestIdVector(builder, numElems)

def FieldSceneExcelAddBeginConditionalBgmscenarioGroupId(builder, beginConditionalBgmscenarioGroupId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(beginConditionalBgmscenarioGroupId), 0)

def AddBeginConditionalBgmscenarioGroupId(builder, beginConditionalBgmscenarioGroupId):
    FieldSceneExcelAddBeginConditionalBgmscenarioGroupId(builder, beginConditionalBgmscenarioGroupId)

def FieldSceneExcelStartBeginConditionalBgmscenarioGroupIdVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartBeginConditionalBgmscenarioGroupIdVector(builder, numElems):
    return FieldSceneExcelStartBeginConditionalBgmscenarioGroupIdVector(builder, numElems)

def FieldSceneExcelAddBeginConditionalBgminteractionId(builder, beginConditionalBgminteractionId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(beginConditionalBgminteractionId), 0)

def AddBeginConditionalBgminteractionId(builder, beginConditionalBgminteractionId):
    FieldSceneExcelAddBeginConditionalBgminteractionId(builder, beginConditionalBgminteractionId)

def FieldSceneExcelStartBeginConditionalBgminteractionIdVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartBeginConditionalBgminteractionIdVector(builder, numElems):
    return FieldSceneExcelStartBeginConditionalBgminteractionIdVector(builder, numElems)

def FieldSceneExcelAddEndConditionalBgmscenarioGroupId(builder, endConditionalBgmscenarioGroupId):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(endConditionalBgmscenarioGroupId), 0)

def AddEndConditionalBgmscenarioGroupId(builder, endConditionalBgmscenarioGroupId):
    FieldSceneExcelAddEndConditionalBgmscenarioGroupId(builder, endConditionalBgmscenarioGroupId)

def FieldSceneExcelStartEndConditionalBgmscenarioGroupIdVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartEndConditionalBgmscenarioGroupIdVector(builder, numElems):
    return FieldSceneExcelStartEndConditionalBgmscenarioGroupIdVector(builder, numElems)

def FieldSceneExcelAddEndConditionalBgminteractionId(builder, endConditionalBgminteractionId):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(endConditionalBgminteractionId), 0)

def AddEndConditionalBgminteractionId(builder, endConditionalBgminteractionId):
    FieldSceneExcelAddEndConditionalBgminteractionId(builder, endConditionalBgminteractionId)

def FieldSceneExcelStartEndConditionalBgminteractionIdVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartEndConditionalBgminteractionIdVector(builder, numElems):
    return FieldSceneExcelStartEndConditionalBgminteractionIdVector(builder, numElems)

def FieldSceneExcelAddConditionalBgmid(builder, conditionalBgmid):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(conditionalBgmid), 0)

def AddConditionalBgmid(builder, conditionalBgmid):
    FieldSceneExcelAddConditionalBgmid(builder, conditionalBgmid)

def FieldSceneExcelStartConditionalBgmidVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartConditionalBgmidVector(builder, numElems):
    return FieldSceneExcelStartConditionalBgmidVector(builder, numElems)

def FieldSceneExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return FieldSceneExcelEnd(builder)
