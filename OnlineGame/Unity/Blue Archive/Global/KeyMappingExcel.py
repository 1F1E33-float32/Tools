# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Global

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class KeyMappingExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KeyMappingExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKeyMappingExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KeyMappingExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # KeyMappingExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # KeyMappingExcel
    def TargetKeyCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # KeyMappingExcel
    def IsDisplay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # KeyMappingExcel
    def IsUsed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # KeyMappingExcel
    def IsLongPress(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # KeyMappingExcel
    def IgnorePosCheck(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # KeyMappingExcel
    def IconPositionX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # KeyMappingExcel
    def IconPositionY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # KeyMappingExcel
    def IconScaleX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # KeyMappingExcel
    def IconScaleY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def KeyMappingExcelStart(builder):
    builder.StartObject(10)

def Start(builder):
    KeyMappingExcelStart(builder)

def KeyMappingExcelAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    KeyMappingExcelAddId(builder, id)

def KeyMappingExcelAddTargetKeyCode(builder, targetKeyCode):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(targetKeyCode), 0)

def AddTargetKeyCode(builder, targetKeyCode):
    KeyMappingExcelAddTargetKeyCode(builder, targetKeyCode)

def KeyMappingExcelAddIsDisplay(builder, isDisplay):
    builder.PrependBoolSlot(2, isDisplay, 0)

def AddIsDisplay(builder, isDisplay):
    KeyMappingExcelAddIsDisplay(builder, isDisplay)

def KeyMappingExcelAddIsUsed(builder, isUsed):
    builder.PrependBoolSlot(3, isUsed, 0)

def AddIsUsed(builder, isUsed):
    KeyMappingExcelAddIsUsed(builder, isUsed)

def KeyMappingExcelAddIsLongPress(builder, isLongPress):
    builder.PrependBoolSlot(4, isLongPress, 0)

def AddIsLongPress(builder, isLongPress):
    KeyMappingExcelAddIsLongPress(builder, isLongPress)

def KeyMappingExcelAddIgnorePosCheck(builder, ignorePosCheck):
    builder.PrependBoolSlot(5, ignorePosCheck, 0)

def AddIgnorePosCheck(builder, ignorePosCheck):
    KeyMappingExcelAddIgnorePosCheck(builder, ignorePosCheck)

def KeyMappingExcelAddIconPositionX(builder, iconPositionX):
    builder.PrependFloat32Slot(6, iconPositionX, 0.0)

def AddIconPositionX(builder, iconPositionX):
    KeyMappingExcelAddIconPositionX(builder, iconPositionX)

def KeyMappingExcelAddIconPositionY(builder, iconPositionY):
    builder.PrependFloat32Slot(7, iconPositionY, 0.0)

def AddIconPositionY(builder, iconPositionY):
    KeyMappingExcelAddIconPositionY(builder, iconPositionY)

def KeyMappingExcelAddIconScaleX(builder, iconScaleX):
    builder.PrependFloat32Slot(8, iconScaleX, 0.0)

def AddIconScaleX(builder, iconScaleX):
    KeyMappingExcelAddIconScaleX(builder, iconScaleX)

def KeyMappingExcelAddIconScaleY(builder, iconScaleY):
    builder.PrependFloat32Slot(9, iconScaleY, 0.0)

def AddIconScaleY(builder, iconScaleY):
    KeyMappingExcelAddIconScaleY(builder, iconScaleY)

def KeyMappingExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return KeyMappingExcelEnd(builder)
