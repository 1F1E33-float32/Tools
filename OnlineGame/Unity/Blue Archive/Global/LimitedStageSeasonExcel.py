# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Global

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class LimitedStageSeasonExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LimitedStageSeasonExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLimitedStageSeasonExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # LimitedStageSeasonExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LimitedStageSeasonExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # LimitedStageSeasonExcel
    def StartDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LimitedStageSeasonExcel
    def EndDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LimitedStageSeasonExcel
    def TypeAcount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # LimitedStageSeasonExcel
    def TypeBcount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # LimitedStageSeasonExcel
    def TypeCcount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def LimitedStageSeasonExcelStart(builder):
    builder.StartObject(6)

def Start(builder):
    LimitedStageSeasonExcelStart(builder)

def LimitedStageSeasonExcelAddId(builder, id):
    builder.PrependInt64Slot(0, id, 0)

def AddId(builder, id):
    LimitedStageSeasonExcelAddId(builder, id)

def LimitedStageSeasonExcelAddStartDate(builder, startDate):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(startDate), 0)

def AddStartDate(builder, startDate):
    LimitedStageSeasonExcelAddStartDate(builder, startDate)

def LimitedStageSeasonExcelAddEndDate(builder, endDate):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(endDate), 0)

def AddEndDate(builder, endDate):
    LimitedStageSeasonExcelAddEndDate(builder, endDate)

def LimitedStageSeasonExcelAddTypeAcount(builder, typeAcount):
    builder.PrependInt64Slot(3, typeAcount, 0)

def AddTypeAcount(builder, typeAcount):
    LimitedStageSeasonExcelAddTypeAcount(builder, typeAcount)

def LimitedStageSeasonExcelAddTypeBcount(builder, typeBcount):
    builder.PrependInt64Slot(4, typeBcount, 0)

def AddTypeBcount(builder, typeBcount):
    LimitedStageSeasonExcelAddTypeBcount(builder, typeBcount)

def LimitedStageSeasonExcelAddTypeCcount(builder, typeCcount):
    builder.PrependInt64Slot(5, typeCcount, 0)

def AddTypeCcount(builder, typeCcount):
    LimitedStageSeasonExcelAddTypeCcount(builder, typeCcount)

def LimitedStageSeasonExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return LimitedStageSeasonExcelEnd(builder)
