# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Aki

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FavorWord(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FavorWord()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFavorWord(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FavorWord
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FavorWord
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FavorWord
    def RoleId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FavorWord
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FavorWord
    def Sort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FavorWord
    def Title(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FavorWord
    def Content(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FavorWord
    def Voice(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FavorWord
    def Cvcn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FavorWord
    def Cvjp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FavorWord
    def Cven(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FavorWord
    def Cvko(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FavorWord
    def CondGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FavorWord
    def MotionImg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FavorWord
    def AniBlueprint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FavorWord
    def AniMontage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FavorWord
    def Morph(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def FavorWordStart(builder):
    builder.StartObject(16)

def Start(builder):
    FavorWordStart(builder)

def FavorWordAddId(builder, id):
    builder.PrependInt32Slot(0, id, 0)

def AddId(builder, id):
    FavorWordAddId(builder, id)

def FavorWordAddRoleId(builder, roleId):
    builder.PrependInt32Slot(1, roleId, 0)

def AddRoleId(builder, roleId):
    FavorWordAddRoleId(builder, roleId)

def FavorWordAddType(builder, type):
    builder.PrependInt32Slot(2, type, 0)

def AddType(builder, type):
    FavorWordAddType(builder, type)

def FavorWordAddSort(builder, sort):
    builder.PrependInt32Slot(3, sort, 0)

def AddSort(builder, sort):
    FavorWordAddSort(builder, sort)

def FavorWordAddTitle(builder, title):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(title), 0)

def AddTitle(builder, title):
    FavorWordAddTitle(builder, title)

def FavorWordAddContent(builder, content):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(content), 0)

def AddContent(builder, content):
    FavorWordAddContent(builder, content)

def FavorWordAddVoice(builder, voice):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(voice), 0)

def AddVoice(builder, voice):
    FavorWordAddVoice(builder, voice)

def FavorWordAddCvcn(builder, cvcn):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(cvcn), 0)

def AddCvcn(builder, cvcn):
    FavorWordAddCvcn(builder, cvcn)

def FavorWordAddCvjp(builder, cvjp):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(cvjp), 0)

def AddCvjp(builder, cvjp):
    FavorWordAddCvjp(builder, cvjp)

def FavorWordAddCven(builder, cven):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(cven), 0)

def AddCven(builder, cven):
    FavorWordAddCven(builder, cven)

def FavorWordAddCvko(builder, cvko):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(cvko), 0)

def AddCvko(builder, cvko):
    FavorWordAddCvko(builder, cvko)

def FavorWordAddCondGroupId(builder, condGroupId):
    builder.PrependInt32Slot(11, condGroupId, 0)

def AddCondGroupId(builder, condGroupId):
    FavorWordAddCondGroupId(builder, condGroupId)

def FavorWordAddMotionImg(builder, motionImg):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(motionImg), 0)

def AddMotionImg(builder, motionImg):
    FavorWordAddMotionImg(builder, motionImg)

def FavorWordAddAniBlueprint(builder, aniBlueprint):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(aniBlueprint), 0)

def AddAniBlueprint(builder, aniBlueprint):
    FavorWordAddAniBlueprint(builder, aniBlueprint)

def FavorWordAddAniMontage(builder, aniMontage):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(aniMontage), 0)

def AddAniMontage(builder, aniMontage):
    FavorWordAddAniMontage(builder, aniMontage)

def FavorWordAddMorph(builder, morph):
    builder.PrependInt32Slot(15, morph, 0)

def AddMorph(builder, morph):
    FavorWordAddMorph(builder, morph)

def FavorWordEnd(builder):
    return builder.EndObject()

def End(builder):
    return FavorWordEnd(builder)
