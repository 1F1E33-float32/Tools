# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Global

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CumulativeTimeRewardExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CumulativeTimeRewardExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCumulativeTimeRewardExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CumulativeTimeRewardExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CumulativeTimeRewardExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CumulativeTimeRewardExcel
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CumulativeTimeRewardExcel
    def StartDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CumulativeTimeRewardExcel
    def EndDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CumulativeTimeRewardExcel
    def TimeCondition(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # CumulativeTimeRewardExcel
    def TimeConditionAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # CumulativeTimeRewardExcel
    def TimeConditionLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CumulativeTimeRewardExcel
    def TimeConditionIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # CumulativeTimeRewardExcel
    def RewardParcelType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CumulativeTimeRewardExcel
    def RewardParcelTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # CumulativeTimeRewardExcel
    def RewardParcelTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CumulativeTimeRewardExcel
    def RewardParcelTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # CumulativeTimeRewardExcel
    def RewardId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # CumulativeTimeRewardExcel
    def RewardIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # CumulativeTimeRewardExcel
    def RewardIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CumulativeTimeRewardExcel
    def RewardIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # CumulativeTimeRewardExcel
    def RewardAmount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CumulativeTimeRewardExcel
    def RewardAmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # CumulativeTimeRewardExcel
    def RewardAmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CumulativeTimeRewardExcel
    def RewardAmountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def CumulativeTimeRewardExcelStart(builder):
    builder.StartObject(8)

def Start(builder):
    CumulativeTimeRewardExcelStart(builder)

def CumulativeTimeRewardExcelAddId(builder, id):
    builder.PrependInt64Slot(0, id, 0)

def AddId(builder, id):
    CumulativeTimeRewardExcelAddId(builder, id)

def CumulativeTimeRewardExcelAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    CumulativeTimeRewardExcelAddDescription(builder, description)

def CumulativeTimeRewardExcelAddStartDate(builder, startDate):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(startDate), 0)

def AddStartDate(builder, startDate):
    CumulativeTimeRewardExcelAddStartDate(builder, startDate)

def CumulativeTimeRewardExcelAddEndDate(builder, endDate):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(endDate), 0)

def AddEndDate(builder, endDate):
    CumulativeTimeRewardExcelAddEndDate(builder, endDate)

def CumulativeTimeRewardExcelAddTimeCondition(builder, timeCondition):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(timeCondition), 0)

def AddTimeCondition(builder, timeCondition):
    CumulativeTimeRewardExcelAddTimeCondition(builder, timeCondition)

def CumulativeTimeRewardExcelStartTimeConditionVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartTimeConditionVector(builder, numElems):
    return CumulativeTimeRewardExcelStartTimeConditionVector(builder, numElems)

def CumulativeTimeRewardExcelAddRewardParcelType(builder, rewardParcelType):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(rewardParcelType), 0)

def AddRewardParcelType(builder, rewardParcelType):
    CumulativeTimeRewardExcelAddRewardParcelType(builder, rewardParcelType)

def CumulativeTimeRewardExcelStartRewardParcelTypeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRewardParcelTypeVector(builder, numElems):
    return CumulativeTimeRewardExcelStartRewardParcelTypeVector(builder, numElems)

def CumulativeTimeRewardExcelAddRewardId(builder, rewardId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(rewardId), 0)

def AddRewardId(builder, rewardId):
    CumulativeTimeRewardExcelAddRewardId(builder, rewardId)

def CumulativeTimeRewardExcelStartRewardIdVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartRewardIdVector(builder, numElems):
    return CumulativeTimeRewardExcelStartRewardIdVector(builder, numElems)

def CumulativeTimeRewardExcelAddRewardAmount(builder, rewardAmount):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(rewardAmount), 0)

def AddRewardAmount(builder, rewardAmount):
    CumulativeTimeRewardExcelAddRewardAmount(builder, rewardAmount)

def CumulativeTimeRewardExcelStartRewardAmountVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRewardAmountVector(builder, numElems):
    return CumulativeTimeRewardExcelStartRewardAmountVector(builder, numElems)

def CumulativeTimeRewardExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return CumulativeTimeRewardExcelEnd(builder)
