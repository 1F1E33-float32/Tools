# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Global

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EmblemExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EmblemExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEmblemExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EmblemExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EmblemExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EmblemExcel
    def Category(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EmblemExcel
    def Rarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EmblemExcel
    def DisplayOrder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EmblemExcel
    def LocalizeEtcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EmblemExcel
    def LocalizeCodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EmblemExcel
    def UseAtLocalizeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EmblemExcel
    def EmblemTextVisible(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # EmblemExcel
    def IconPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EmblemExcel
    def EmblemIconPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EmblemExcel
    def EmblemIconNumControl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EmblemExcel
    def EmblemIconBgpath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EmblemExcel
    def EmblemBgpathJp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EmblemExcel
    def EmblemBgpathKr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EmblemExcel
    def EmblemBgpathTh(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EmblemExcel
    def EmblemBgpathTw(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EmblemExcel
    def EmblemBgpathEn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EmblemExcel
    def DisplayType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EmblemExcel
    def DisplayStartDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EmblemExcel
    def DisplayEndDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EmblemExcel
    def DislpayFavorLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EmblemExcel
    def CheckPassType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EmblemExcel
    def EmblemParameter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EmblemExcel
    def CheckPassCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def EmblemExcelStart(builder):
    builder.StartObject(24)

def Start(builder):
    EmblemExcelStart(builder)

def EmblemExcelAddId(builder, id):
    builder.PrependInt64Slot(0, id, 0)

def AddId(builder, id):
    EmblemExcelAddId(builder, id)

def EmblemExcelAddCategory(builder, category):
    builder.PrependInt32Slot(1, category, 0)

def AddCategory(builder, category):
    EmblemExcelAddCategory(builder, category)

def EmblemExcelAddRarity(builder, rarity):
    builder.PrependInt32Slot(2, rarity, 0)

def AddRarity(builder, rarity):
    EmblemExcelAddRarity(builder, rarity)

def EmblemExcelAddDisplayOrder(builder, displayOrder):
    builder.PrependInt64Slot(3, displayOrder, 0)

def AddDisplayOrder(builder, displayOrder):
    EmblemExcelAddDisplayOrder(builder, displayOrder)

def EmblemExcelAddLocalizeEtcId(builder, localizeEtcId):
    builder.PrependUint32Slot(4, localizeEtcId, 0)

def AddLocalizeEtcId(builder, localizeEtcId):
    EmblemExcelAddLocalizeEtcId(builder, localizeEtcId)

def EmblemExcelAddLocalizeCodeId(builder, localizeCodeId):
    builder.PrependUint32Slot(5, localizeCodeId, 0)

def AddLocalizeCodeId(builder, localizeCodeId):
    EmblemExcelAddLocalizeCodeId(builder, localizeCodeId)

def EmblemExcelAddUseAtLocalizeId(builder, useAtLocalizeId):
    builder.PrependInt64Slot(6, useAtLocalizeId, 0)

def AddUseAtLocalizeId(builder, useAtLocalizeId):
    EmblemExcelAddUseAtLocalizeId(builder, useAtLocalizeId)

def EmblemExcelAddEmblemTextVisible(builder, emblemTextVisible):
    builder.PrependBoolSlot(7, emblemTextVisible, 0)

def AddEmblemTextVisible(builder, emblemTextVisible):
    EmblemExcelAddEmblemTextVisible(builder, emblemTextVisible)

def EmblemExcelAddIconPath(builder, iconPath):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(iconPath), 0)

def AddIconPath(builder, iconPath):
    EmblemExcelAddIconPath(builder, iconPath)

def EmblemExcelAddEmblemIconPath(builder, emblemIconPath):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(emblemIconPath), 0)

def AddEmblemIconPath(builder, emblemIconPath):
    EmblemExcelAddEmblemIconPath(builder, emblemIconPath)

def EmblemExcelAddEmblemIconNumControl(builder, emblemIconNumControl):
    builder.PrependInt32Slot(10, emblemIconNumControl, 0)

def AddEmblemIconNumControl(builder, emblemIconNumControl):
    EmblemExcelAddEmblemIconNumControl(builder, emblemIconNumControl)

def EmblemExcelAddEmblemIconBgpath(builder, emblemIconBgpath):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(emblemIconBgpath), 0)

def AddEmblemIconBgpath(builder, emblemIconBgpath):
    EmblemExcelAddEmblemIconBgpath(builder, emblemIconBgpath)

def EmblemExcelAddEmblemBgpathJp(builder, emblemBgpathJp):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(emblemBgpathJp), 0)

def AddEmblemBgpathJp(builder, emblemBgpathJp):
    EmblemExcelAddEmblemBgpathJp(builder, emblemBgpathJp)

def EmblemExcelAddEmblemBgpathKr(builder, emblemBgpathKr):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(emblemBgpathKr), 0)

def AddEmblemBgpathKr(builder, emblemBgpathKr):
    EmblemExcelAddEmblemBgpathKr(builder, emblemBgpathKr)

def EmblemExcelAddEmblemBgpathTh(builder, emblemBgpathTh):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(emblemBgpathTh), 0)

def AddEmblemBgpathTh(builder, emblemBgpathTh):
    EmblemExcelAddEmblemBgpathTh(builder, emblemBgpathTh)

def EmblemExcelAddEmblemBgpathTw(builder, emblemBgpathTw):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(emblemBgpathTw), 0)

def AddEmblemBgpathTw(builder, emblemBgpathTw):
    EmblemExcelAddEmblemBgpathTw(builder, emblemBgpathTw)

def EmblemExcelAddEmblemBgpathEn(builder, emblemBgpathEn):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(emblemBgpathEn), 0)

def AddEmblemBgpathEn(builder, emblemBgpathEn):
    EmblemExcelAddEmblemBgpathEn(builder, emblemBgpathEn)

def EmblemExcelAddDisplayType(builder, displayType):
    builder.PrependInt32Slot(17, displayType, 0)

def AddDisplayType(builder, displayType):
    EmblemExcelAddDisplayType(builder, displayType)

def EmblemExcelAddDisplayStartDate(builder, displayStartDate):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(displayStartDate), 0)

def AddDisplayStartDate(builder, displayStartDate):
    EmblemExcelAddDisplayStartDate(builder, displayStartDate)

def EmblemExcelAddDisplayEndDate(builder, displayEndDate):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(displayEndDate), 0)

def AddDisplayEndDate(builder, displayEndDate):
    EmblemExcelAddDisplayEndDate(builder, displayEndDate)

def EmblemExcelAddDislpayFavorLevel(builder, dislpayFavorLevel):
    builder.PrependInt32Slot(20, dislpayFavorLevel, 0)

def AddDislpayFavorLevel(builder, dislpayFavorLevel):
    EmblemExcelAddDislpayFavorLevel(builder, dislpayFavorLevel)

def EmblemExcelAddCheckPassType(builder, checkPassType):
    builder.PrependInt32Slot(21, checkPassType, 0)

def AddCheckPassType(builder, checkPassType):
    EmblemExcelAddCheckPassType(builder, checkPassType)

def EmblemExcelAddEmblemParameter(builder, emblemParameter):
    builder.PrependInt64Slot(22, emblemParameter, 0)

def AddEmblemParameter(builder, emblemParameter):
    EmblemExcelAddEmblemParameter(builder, emblemParameter)

def EmblemExcelAddCheckPassCount(builder, checkPassCount):
    builder.PrependInt64Slot(23, checkPassCount, 0)

def AddCheckPassCount(builder, checkPassCount):
    EmblemExcelAddCheckPassCount(builder, checkPassCount)

def EmblemExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return EmblemExcelEnd(builder)
