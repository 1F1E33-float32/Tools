# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Global

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RootMotionFlat(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RootMotionFlat()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRootMotionFlat(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RootMotionFlat
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RootMotionFlat
    def Forms(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Global.Form import Form
            obj = Form()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RootMotionFlat
    def FormsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RootMotionFlat
    def FormsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # RootMotionFlat
    def ExSkills(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Global.Motion import Motion
            obj = Motion()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RootMotionFlat
    def ExSkillsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RootMotionFlat
    def ExSkillsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # RootMotionFlat
    def MoveLeftOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Global.Motion import Motion
            obj = Motion()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RootMotionFlat
    def MoveRightOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Global.Motion import Motion
            obj = Motion()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def RootMotionFlatStart(builder):
    builder.StartObject(4)

def Start(builder):
    RootMotionFlatStart(builder)

def RootMotionFlatAddForms(builder, forms):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(forms), 0)

def AddForms(builder, forms):
    RootMotionFlatAddForms(builder, forms)

def RootMotionFlatStartFormsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartFormsVector(builder, numElems):
    return RootMotionFlatStartFormsVector(builder, numElems)

def RootMotionFlatAddExSkills(builder, exSkills):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(exSkills), 0)

def AddExSkills(builder, exSkills):
    RootMotionFlatAddExSkills(builder, exSkills)

def RootMotionFlatStartExSkillsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartExSkillsVector(builder, numElems):
    return RootMotionFlatStartExSkillsVector(builder, numElems)

def RootMotionFlatAddMoveLeftOffset(builder, moveLeftOffset):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(moveLeftOffset), 0)

def AddMoveLeftOffset(builder, moveLeftOffset):
    RootMotionFlatAddMoveLeftOffset(builder, moveLeftOffset)

def RootMotionFlatAddMoveRightOffset(builder, moveRightOffset):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(moveRightOffset), 0)

def AddMoveRightOffset(builder, moveRightOffset):
    RootMotionFlatAddMoveRightOffset(builder, moveRightOffset)

def RootMotionFlatEnd(builder):
    return builder.EndObject()

def End(builder):
    return RootMotionFlatEnd(builder)
