# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Aki

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FlowState(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FlowState()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFlowState(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FlowState
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FlowState
    def StateKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FlowState
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FlowState
    def KeepBgm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # FlowState
    def IsPreloadFlow(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # FlowState
    def Pos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FlowState
    def Actions(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def FlowStateStart(builder):
    builder.StartObject(6)

def Start(builder):
    FlowStateStart(builder)

def FlowStateAddStateKey(builder, stateKey):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stateKey), 0)

def AddStateKey(builder, stateKey):
    FlowStateAddStateKey(builder, stateKey)

def FlowStateAddId(builder, id):
    builder.PrependInt32Slot(1, id, 0)

def AddId(builder, id):
    FlowStateAddId(builder, id)

def FlowStateAddKeepBgm(builder, keepBgm):
    builder.PrependBoolSlot(2, keepBgm, 0)

def AddKeepBgm(builder, keepBgm):
    FlowStateAddKeepBgm(builder, keepBgm)

def FlowStateAddIsPreloadFlow(builder, isPreloadFlow):
    builder.PrependBoolSlot(3, isPreloadFlow, 0)

def AddIsPreloadFlow(builder, isPreloadFlow):
    FlowStateAddIsPreloadFlow(builder, isPreloadFlow)

def FlowStateAddPos(builder, pos):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(pos), 0)

def AddPos(builder, pos):
    FlowStateAddPos(builder, pos)

def FlowStateAddActions(builder, actions):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(actions), 0)

def AddActions(builder, actions):
    FlowStateAddActions(builder, actions)

def FlowStateEnd(builder):
    return builder.EndObject()

def End(builder):
    return FlowStateEnd(builder)
