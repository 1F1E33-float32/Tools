import argparse
import os
import struct
from pathlib import Path

import lz4.block
from tqdm import tqdm

# fmt: off
CRYPT_KEY_1 = bytes([
    0xD3, 0x53, 0xD2, 0x85, 0xDC, 0x87, 0x77, 0xA7, 0x16, 0xFA, 0x8D, 0x45, 0x9D, 0x14, 0x60, 0x3B,
    0x9B, 0x7B, 0xDA, 0xED, 0x25, 0xFD, 0xF5, 0x8D, 0x44, 0xD0, 0xEB, 0x8B, 0xAB, 0x4B, 0x6A, 0x3E,
    0x01, 0x28, 0x63, 0xA3, 0xE3, 0x23, 0x63, 0xA3, 0xE2, 0x55, 0x6D, 0xA5, 0x7C, 0xA8, 0xE4, 0xF0,
    0x8B, 0xAA, 0x7D, 0x74, 0x40, 0x9C, 0x47, 0x36, 0x9A, 0xAE, 0xB1, 0x19, 0x60, 0x3B, 0x9A, 0xAD,
    0xE4, 0xEF, 0xBE, 0x82, 0x76, 0xDA, 0xED, 0x25, 0xFD, 0xF5, 0x8D, 0x45, 0x9C, 0x47, 0x37, 0x67,
    0xD6, 0xB9, 0x81, 0xA8, 0xE3, 0x22, 0x96, 0x79, 0x40, 0x9C, 0x48, 0x04, 0x90, 0xAB, 0x4B, 0x6B,
    0x0A, 0x5E, 0xA1, 0x48, 0x03, 0xC3, 0x83, 0x42, 0x35, 0xCD, 0x85, 0xDD, 0x55, 0x6C, 0xD7, 0x87,
    0x76, 0xD9, 0x20, 0xFC, 0x28, 0x63, 0xA2, 0x15, 0x2D, 0x64, 0x6F, 0x3E, 0x02, 0xF6, 0x5A, 0x6D,
    0xA5, 0x7D, 0x74, 0x3F, 0xCE, 0x51, 0x39, 0x00, 0x5C, 0x08, 0xC3, 0x82, 0x75, 0x0C, 0xF8, 0xF3,
    0xF2, 0x26, 0xCA, 0x1E, 0x62, 0xD5, 0xED, 0x24, 0x30, 0xCC, 0xB8, 0xB3, 0xB3, 0xB2, 0xE6, 0x89,
    0x11, 0xF9, 0xC0, 0x1B, 0xFA, 0x8E, 0x12, 0xC6, 0xE9, 0xF1, 0x58, 0xD4, 0x20, 0xFB, 0x5B, 0x3B,
    0x9A, 0xAD, 0xE4, 0xF0, 0x8B, 0xAA, 0x7D, 0x74, 0x40, 0x9C, 0x47, 0x36, 0x9A, 0xAD, 0xE4, 0xF0,
    0x8C, 0x77, 0xA7, 0x16, 0xFA, 0x8D, 0x45, 0x9C, 0x47, 0x36, 0x99, 0xE0, 0xBB, 0x1B, 0xFB, 0x5B,
    0x3B, 0x9B, 0x7A, 0x0E, 0x91, 0x78, 0x73, 0x73, 0x72, 0xA5, 0x7D, 0x75, 0x0C, 0xF7, 0x26, 0xC9,
    0x51, 0x38, 0x34, 0x00, 0x5C, 0x08, 0xC4, 0x50, 0x6C, 0xD7, 0x86, 0xAA, 0x7D, 0x75, 0x0C, 0xF7,
    0x26, 0xC9, 0x50, 0x6B, 0x0B, 0x2A, 0xFE, 0xC2, 0xB6, 0x19, 0x60, 0x3C, 0x68, 0xA4, 0xB0, 0x4C,
    0x38, 0x33, 0x32, 0x65, 0x3D, 0x34, 0x00, 0x5C, 0x07, 0xF6, 0x59, 0xA0, 0x7C, 0xA7, 0x16, 0xF9,
    0xC1, 0xE8, 0x24, 0x2F, 0xFF, 0x8E, 0x12, 0xC6, 0xE9, 0xF0, 0x8C, 0x78, 0x74, 0x40, 0x9B, 0x7A,
    0x0E, 0x91, 0x79, 0x41, 0x69, 0x71, 0xD9, 0x20, 0xFB, 0x5B, 0x3B, 0x9A, 0xAE, 0xB2, 0xE6, 0x8A,
    0xDE, 0x22, 0x95, 0xAC, 0x18, 0x93, 0x12, 0xC5, 0x1D, 0x95, 0xAC, 0x18, 0x93, 0x13, 0x93, 0x12,
    0xC6, 0xEA, 0xBD, 0xB5, 0x4C, 0x38, 0x34, 0x00, 0x5B, 0x3B, 0x9A, 0xAD, 0xE5, 0xBD, 0xB5, 0x4C,
    0x38, 0x34, 0xFF, 0x8E, 0x11, 0xF8, 0xF4, 0xC0, 0x1B, 0xFB, 0x5B, 0x3B, 0x9A, 0xAE, 0xB2, 0xE5,
    0xBD, 0xB5, 0x4D, 0x05, 0x5D, 0xD5, 0xED, 0x24, 0x30, 0xCC, 0xB8, 0xB4, 0x7F, 0x0F, 0x5E, 0xA2,
    0x15, 0x2D, 0x64, 0x6F, 0x3E, 0x02, 0xF6, 0x59, 0xA1, 0x48, 0x03, 0xC2, 0xB6, 0x1A, 0x2E, 0x31,
    0x98, 0x13, 0x93, 0x12, 0xC5, 0x1D, 0x95, 0xAD, 0xE4, 0xF0, 0x8C, 0x77, 0xA7, 0x16, 0xF9, 0xC1,
    0xE9, 0xF1, 0x58, 0xD4, 0x20, 0xFB, 0x5B, 0x3A, 0xCD, 0x84, 0x10, 0x2C, 0x98, 0x14, 0x5F, 0x6E,
    0x72, 0xA5, 0x7C, 0xA8, 0xE4, 0xEF, 0xBE, 0x81, 0xA9, 0xB0, 0x4B, 0x6B, 0x0A, 0x5D, 0xD4, 0x20,
    0xFC, 0x27, 0x97, 0x47, 0x37, 0x66, 0x09, 0x90, 0xAB, 0x4A, 0x9E, 0xE2, 0x55, 0x6C, 0xD8, 0x54,
    0x9F, 0xAE, 0xB2, 0xE6, 0x89, 0x11, 0xF9, 0xC0, 0x1C, 0xC7, 0xB6, 0x1A, 0x2E, 0x32, 0x66, 0x09,
    0x91, 0x79, 0x41, 0x68, 0xA4, 0xB0, 0x4B, 0x6A, 0x3E, 0x02, 0xF6, 0x59, 0xA1, 0x48, 0x04, 0x90,
    0xAB, 0x4B, 0x6A, 0x3E, 0x01, 0x28, 0x63, 0xA3, 0xE2, 0x56, 0x39, 0x01, 0x28, 0x63, 0xA2, 0x16,
    0xF9, 0xC0, 0x1B, 0xFA, 0x8E, 0x11, 0xF9, 0xC1, 0xE9, 0xF1, 0x59, 0xA1, 0x48, 0x03, 0xC3, 0x82,
    0x76, 0xD9, 0x20, 0xFC, 0x27, 0x96, 0x79, 0x40, 0x9B, 0x7B, 0xDA, 0xEE, 0xF1, 0x59, 0xA0, 0x7C,
    0xA7, 0x17, 0xC7, 0xB7, 0xE6, 0x89, 0x11, 0xF9, 0xC1, 0xE9, 0xF1, 0x59, 0xA0, 0x7C, 0xA7, 0x16,
    0xFA, 0x8D, 0x44, 0xCF, 0x1E, 0x62, 0xD5, 0xED, 0x25, 0xFD, 0xF4, 0xBF, 0x4E, 0xD1, 0xB8, 0xB3,
    0xB2, 0xE5, 0xBC, 0xE7, 0x57, 0x06, 0x2A, 0xFE, 0xC2, 0xB5, 0x4D, 0x04, 0x8F, 0xDE, 0x22, 0x96,
    0x79, 0x40, 0x9B, 0x7B, 0xDA, 0xED, 0x25, 0xFC, 0x28, 0x64, 0x70, 0x0C, 0xF7, 0x27, 0x97, 0x46,
    0x6A, 0x3D, 0x35, 0xCC, 0xB7, 0xE7, 0x56, 0x3A, 0xCD, 0x84, 0x0F, 0x5E, 0xA1, 0x48, 0x04, 0x90,
    0xAC, 0x18, 0x94, 0xDF, 0xEE, 0xF1, 0x59, 0xA1, 0x49, 0xD1, 0xB9, 0x80, 0xDC, 0x88, 0x43, 0x03,
    0xC3, 0x82, 0x76, 0xD9, 0x20, 0xFB, 0x5B, 0x3A, 0xCE, 0x52, 0x06, 0x29, 0x31, 0x98, 0x14, 0x60,
    0x3C, 0x67, 0xD7, 0x86, 0xAA, 0x7E, 0x42, 0x35, 0xCD, 0x85, 0xDD, 0x55, 0x6D, 0xA5, 0x7D, 0x75,
    0x0D, 0xC5, 0x1D, 0x94, 0xE0, 0xBB, 0x1A, 0x2D, 0x64, 0x6F, 0x3E, 0x01, 0x29, 0x30, 0xCB, 0xEA,
    0xBE, 0x81, 0xA9, 0xB0, 0x4C, 0x38, 0x34, 0xFF, 0x8F, 0xDE, 0x22, 0x95, 0xAD, 0xE5, 0xBD, 0xB5,
    0x4C, 0x37, 0x66, 0x09, 0x91, 0x79, 0x40, 0x9C, 0x47, 0x37, 0x67, 0xD7, 0x86, 0xAA, 0x7D, 0x74,
    0x40, 0x9C, 0x47, 0x37, 0x66, 0x09, 0x90, 0xAB, 0x4B, 0x6B, 0x0A, 0x5D, 0xD5, 0xEC, 0x58, 0xD3,
    0x53, 0xD3, 0x53, 0xD3, 0x52, 0x06, 0x29, 0x30, 0xCC, 0xB8, 0xB4, 0x7F, 0x0F, 0x5F, 0x6F, 0x3E,
    0x02, 0xF5, 0x8D, 0x45, 0x9D, 0x14, 0x5F, 0x6F, 0x3E, 0x01, 0x29, 0x31, 0x98, 0x13, 0x93, 0x13,
    0x92, 0x45, 0x9D, 0x14, 0x5F, 0x6E, 0x71, 0xD8, 0x54, 0xA0, 0x7B, 0xDB, 0xBA, 0x4D, 0x05, 0x5C,
    0x08, 0xC3, 0x82, 0x75, 0x0D, 0xC4, 0x4F, 0x9F, 0xAE, 0xB1, 0x19, 0x60, 0x3C, 0x68, 0xA4, 0xAF,
    0x7F, 0x0E, 0x92, 0x45, 0x9D, 0x14, 0x60, 0x3C, 0x67, 0xD7, 0x86, 0xA9, 0xB0, 0x4C, 0x37, 0x67,
    0xD6, 0xBA, 0x4D, 0x04, 0x90, 0xAB, 0x4A, 0x9D, 0x14, 0x5F, 0x6E, 0x72, 0xA6, 0x49, 0xD1, 0xB9,
    0x80, 0xDB, 0xBB, 0x1B, 0xFA, 0x8D, 0x44, 0xCF, 0x1E, 0x62, 0xD6, 0xB9, 0x80, 0xDC, 0x87, 0x77,
    0xA6, 0x49, 0xD1, 0xB9, 0x80, 0xDB, 0xBB, 0x1B, 0xFA, 0x8D, 0x44, 0xD0, 0xEB, 0x8A, 0xDE, 0x21,
    0xC8, 0x84, 0x0F, 0x5E, 0xA1, 0x49, 0xD1, 0xB8, 0xB4, 0x80, 0xDC, 0x88, 0x43, 0x03, 0xC3, 0x83,
    0x42, 0x35, 0xCD, 0x84, 0x0F, 0x5E, 0xA1, 0x48, 0x04, 0x8F, 0xDF, 0xEE, 0xF1, 0x59, 0xA0, 0x7C,
    0xA7, 0x17, 0xC7, 0xB6, 0x19, 0x61, 0x08, 0xC4, 0x4F, 0x9F, 0xAE, 0xB1, 0x18, 0x93, 0x12, 0xC6,
    0xEA, 0xBD, 0xB4, 0x80, 0xDC, 0x88, 0x44, 0xD0, 0xEB, 0x8B, 0xAB, 0x4B, 0x6B, 0x0B, 0x2A, 0xFE,
    0xC2, 0xB6, 0x1A, 0x2D, 0x65, 0x3D, 0x35, 0xCC, 0xB8, 0xB4, 0x80, 0xDC, 0x88, 0x43, 0x03, 0xC2,
    0xB5, 0x4D, 0x04, 0x8F, 0xDF, 0xEF, 0xBE, 0x81, 0xA8, 0xE3, 0x23, 0x63, 0xA2, 0x16, 0xF9, 0xC0,
    0x1B, 0xFA, 0x8E, 0x11, 0xF9, 0xC1, 0xE9, 0xF0, 0x8B, 0xAA, 0x7E, 0x42, 0x35, 0xCD, 0x84, 0x10,
    0x2C, 0x97, 0x46, 0x69, 0x70, 0x0C, 0xF7, 0x27, 0x97, 0x47, 0x37, 0x66, 0x0A, 0x5E, 0xA1, 0x49,
    0xD0, 0xEC, 0x58, 0xD4, 0x20, 0xFC, 0x28, 0x64, 0x6F, 0x3E, 0x01, 0x28, 0x63, 0xA2, 0x15, 0x2C,
    0x98, 0x14, 0x60, 0x3B, 0x9B
])

CRYPT_KEY_2 = bytes([
    0x92, 0x85, 0x1D, 0xD4, 0x60, 0x7B, 0x1B, 0x3B, 0xDB, 0xFA, 0xCE, 0x92, 0x85, 0x1D, 0xD5, 0x2D,
    0xA4, 0xF0, 0xCB, 0x2A, 0x3D, 0x74, 0x80, 0x1B, 0x3B, 0xDB, 0xFA, 0xCD, 0xC5, 0x5C, 0x47, 0x77,
    0xE7, 0x97, 0x87, 0xB6, 0x5A, 0xAD, 0x24, 0x6F, 0x7E, 0x82, 0xB6, 0x5A, 0xAD, 0x25, 0x3D, 0x75,
    0x4C, 0x78, 0xB4, 0xC0, 0x5B, 0x7B, 0x1A, 0x6D, 0xE4, 0x2F, 0x3E, 0x42, 0x76, 0x1A, 0x6D, 0xE4,
    0x30, 0x0C, 0x37, 0xA7, 0x57, 0x47, 0x76, 0x1A, 0x6E, 0xB1, 0x59, 0xE1, 0xC9, 0x91, 0xB9, 0xC1,
    0x28, 0xA3, 0x22, 0xD5, 0x2C, 0xD7, 0xC7, 0xF6, 0x99, 0x21, 0x08, 0x03, 0x02, 0x35, 0x0C, 0x38,
    0x73, 0xB3, 0xF2, 0x66, 0x49, 0x10, 0x6C, 0x17, 0x06, 0x6A, 0x7E, 0x82, 0xB5, 0x8C, 0xB8, 0xF4,
    0x00, 0x9C, 0x87, 0xB6, 0x59, 0xE1, 0xC9, 0x90, 0xEC, 0x97, 0x87, 0xB7, 0x26, 0x0A, 0x9E, 0x21,
    0x09, 0xD1, 0xF9, 0x01, 0x68, 0xE4, 0x2F, 0x3F, 0x0F, 0x9F, 0xEF, 0xFF, 0xCE, 0x92, 0x86, 0xE9,
    0x31, 0xD8, 0x94, 0x20, 0x3B, 0xDB, 0xFA, 0xCE, 0x92, 0x85, 0x1C, 0x08, 0x03, 0x02, 0x36, 0xD9,
    0x60, 0x7C, 0xE8, 0x63, 0xE3, 0x62, 0x15, 0x6D, 0xE5, 0xFD, 0x34, 0x3F, 0x0F, 0x9F, 0xEF, 0xFE,
    0x02, 0x36, 0xDA, 0x2D, 0xA4, 0xEF, 0xFE, 0x01, 0x69, 0xB1, 0x59, 0xE0, 0xFB, 0x9B, 0xBA, 0x8D,
    0x85, 0x1D, 0xD4, 0x60, 0x7B, 0x1B, 0x3B, 0xDB, 0xFB, 0x9A, 0xEE, 0x32, 0xA5, 0xBC, 0x28, 0xA3,
    0x23, 0xA3, 0x23, 0xA3, 0x23, 0xA3, 0x22, 0xD6, 0xFA, 0xCE, 0x92, 0x86, 0xE9, 0x30, 0x0C, 0x38,
    0x74, 0x7F, 0x4F, 0xDF, 0x2F, 0x3E, 0x41, 0xA8, 0x23, 0xA3, 0x23, 0xA3, 0x22, 0xD5, 0x2D, 0xA4,
    0xF0, 0xCC, 0xF7, 0x67, 0x16, 0x39, 0x40, 0xDB, 0xFB, 0x9B, 0xBA, 0x8D, 0x84, 0x4F, 0xDE, 0x62,
    0x16, 0x39, 0x40, 0xDC, 0xC7, 0xF6, 0x99, 0x21, 0x08, 0x04, 0xD0, 0x2C, 0xD8, 0x94, 0x1F, 0x6F,
    0x7E, 0x82, 0xB5, 0x8D, 0x85, 0x1C, 0x08, 0x04, 0xD0, 0x2C, 0xD8, 0x93, 0x53, 0x12, 0x05, 0x9C,
    0x88, 0x84, 0x4F, 0xDE, 0x61, 0x48, 0x44, 0x0F, 0x9E, 0x22, 0xD5, 0x2D, 0xA5, 0xBC, 0x28, 0xA4,
    0xF0, 0xCB, 0x2B, 0x0A, 0x9D, 0x55, 0xAC, 0x58, 0x14, 0xA0, 0xBC, 0x28, 0xA3, 0x22, 0xD6, 0xF9,
    0x00, 0x9B, 0xBA, 0x8E, 0x52, 0x45, 0xDC, 0xC7, 0xF7, 0x67, 0x17, 0x06, 0x69, 0xB1, 0x58, 0x13,
    0xD2, 0xC6, 0x29, 0x71, 0x18, 0xD4, 0x5F, 0xAE, 0xF1, 0x98, 0x54, 0xE0, 0xFC, 0x68, 0xE4, 0x2F,
    0x3F, 0x0E, 0xD1, 0xF9, 0x01, 0x69, 0xB1, 0x58, 0x14, 0x9F, 0xEE, 0x32, 0xA5, 0xBD, 0xF4, 0xFF,
    0xCE, 0x91, 0xB9, 0xC0, 0x5B, 0x7B, 0x1B, 0x3A, 0x0D, 0x05, 0x9C, 0x87, 0xB6, 0x5A, 0xAE, 0xF2,
    0x65, 0x7C, 0xE8, 0x63, 0xE3, 0x62, 0x15, 0x6C, 0x17, 0x07, 0x36, 0xD9, 0x61, 0x48, 0x43, 0x43,
    0x42, 0x75, 0x4C, 0x78, 0xB3, 0xF3, 0x33, 0x72, 0xE6, 0xCA, 0x5E, 0xE1, 0xC8, 0xC3, 0xC3, 0xC3,
    0xC2, 0xF6, 0x99, 0x21, 0x08, 0x04, 0xD0, 0x2C, 0xD8, 0x94, 0x1F, 0x6E, 0xB2, 0x26, 0x0A, 0x9E,
    0x22, 0xD5, 0x2D, 0xA4, 0xEF, 0xFF, 0xCF, 0x5F, 0xAF, 0xBE, 0xC2, 0xF5, 0xCC, 0xF7, 0x66, 0x4A,
    0xDE, 0x61, 0x49, 0x11, 0x39, 0x41, 0xA8, 0x24, 0x70, 0x4C, 0x77, 0xE7, 0x97, 0x86, 0xEA, 0xFD,
    0x34, 0x40, 0xDB, 0xFA, 0xCE, 0x92, 0x86, 0xE9, 0x31, 0xD8, 0x93, 0x52, 0x46, 0xAA, 0xBD, 0xF5,
    0xCD, 0xC5, 0x5D, 0x14, 0xA0, 0xBB, 0x5A, 0xAE, 0xF2, 0x65, 0x7C, 0xE7, 0x97, 0x86, 0xEA, 0xFD,
    0x34, 0x3F, 0x0E, 0xD2, 0xC5, 0x5D, 0x15, 0x6D, 0xE5, 0xFD, 0x35, 0x0C, 0x37, 0xA7, 0x57, 0x47,
    0x77, 0xE7, 0x97, 0x87, 0xB6, 0x59, 0xE1, 0xC8, 0xC4, 0x8F, 0x1E, 0xA2, 0x55, 0xAD, 0x24, 0x70,
    0x4C, 0x77, 0xE7, 0x96, 0xB9, 0xC0, 0x5C, 0x47, 0x76, 0x1A, 0x6D, 0xE4, 0x2F, 0x3E, 0x41, 0xA9,
    0xF1, 0x98, 0x53, 0x12, 0x06, 0x69, 0xB0, 0x8C, 0xB7, 0x26, 0x0A, 0x9D, 0x54, 0xDF, 0x2E, 0x72,
    0xE5, 0xFD, 0x34, 0x3F, 0x0F, 0x9F, 0xEE, 0x32, 0xA5, 0xBD, 0xF4, 0xFF, 0xCF, 0x5E, 0xE1, 0xC9,
    0x91, 0xB9, 0xC0, 0x5C, 0x48, 0x43, 0x42, 0x75, 0x4C, 0x78, 0xB3, 0xF2, 0x65, 0x7C, 0xE7, 0x96,
    0xB9, 0xC1, 0x28, 0xA3, 0x22, 0xD5, 0x2D, 0xA5, 0xBC, 0x27, 0xD6, 0xF9, 0x01, 0x69, 0xB1, 0x58,
    0x13, 0xD2, 0xC6, 0x2A, 0x3D, 0x75, 0x4D, 0x45, 0xDC, 0xC7, 0xF6, 0x99, 0x21, 0x09, 0xD0, 0x2C,
    0xD7, 0xC7, 0xF7, 0x67, 0x16, 0x39, 0x41, 0xA8, 0x24, 0x6F, 0x7E, 0x82, 0xB6, 0x59, 0xE1, 0xC9,
    0x90, 0xEC, 0x98, 0x53, 0x12, 0x05, 0x9C, 0x87, 0xB6, 0x5A, 0xAD, 0x25, 0x3C, 0xA8, 0x24, 0x70,
    0x4C, 0x77, 0xE6, 0xCA, 0x5E, 0xE2, 0x95, 0xED, 0x64, 0xB0, 0x8B, 0xEB, 0xCB, 0x2B, 0x0A, 0x9D,
    0x55, 0xAC, 0x58, 0x13, 0xD3, 0x92, 0x86, 0xEA, 0xFD, 0x34, 0x3F, 0x0E, 0xD1, 0xF8, 0x34, 0x40,
    0xDC, 0xC8, 0xC4, 0x8F, 0x1E, 0xA1, 0x89, 0x50, 0xAB, 0x8A, 0x1D, 0xD5, 0x2D, 0xA4, 0xF0, 0xCB,
    0x2B, 0x0A, 0x9D, 0x55, 0xAC, 0x57, 0x46, 0xA9, 0xF0, 0xCC, 0xF7, 0x67, 0x17, 0x07, 0x36, 0xDA,
    0x2E, 0x71, 0x19, 0xA1, 0x88, 0x83, 0x83, 0x83, 0x82, 0xB6, 0x5A, 0xAD, 0x25, 0x3D, 0x74, 0x80,
    0x1C, 0x08, 0x04, 0xCF, 0x5F, 0xAF, 0xBF, 0x8E, 0x51, 0x78, 0xB3, 0xF3, 0x32, 0xA5, 0xBD, 0xF5,
    0xCD, 0xC4, 0x90, 0xEC, 0x97, 0x87, 0xB7, 0x27, 0xD7, 0xC6, 0x29, 0x70, 0x4B, 0xAB, 0x8B, 0xEB,
    0xCB, 0x2A, 0x3D, 0x74, 0x7F, 0x4F, 0xDE, 0x62, 0x15, 0x6D, 0xE5, 0xFD, 0x34, 0x40, 0xDB, 0xFA,
    0xCD, 0xC4, 0x90, 0xEB, 0xCA, 0x5E, 0xE1, 0xC9, 0x91, 0xB9, 0xC1, 0x28, 0xA4, 0xEF, 0xFF, 0xCE,
    0x92, 0x85, 0x1D, 0xD4, 0x5F, 0xAE, 0xF2, 0x65, 0x7D, 0xB5, 0x8D, 0x84, 0x50, 0xAC, 0x57, 0x47,
    0x76, 0x1A, 0x6E, 0xB1, 0x59, 0xE0, 0xFB, 0x9B, 0xBB, 0x5B, 0x7A, 0x4D, 0x45, 0xDD, 0x95, 0xED,
    0x65, 0x7D, 0xB4, 0xBF, 0x8F, 0x1F, 0x6F, 0x7E, 0x81, 0xE9, 0x30, 0x0C, 0x37, 0xA6, 0x89, 0x50,
    0xAC, 0x57, 0x46, 0xAA, 0xBD, 0xF5, 0xCC, 0xF7, 0x66, 0x4A, 0xDE, 0x61, 0x48, 0x44, 0x10, 0x6C,
    0x18, 0xD4, 0x5F, 0xAF, 0xBE, 0xC1, 0x28, 0xA3, 0x23, 0xA2, 0x55, 0xAC, 0x58, 0x14, 0xA0, 0xBC,
    0x28, 0xA4, 0xEF, 0xFF, 0xCF, 0x5E, 0xE1, 0xC8, 0xC4, 0x8F, 0x1E, 0xA1, 0x88, 0x83, 0x82, 0xB5,
    0x8C, 0xB7, 0x27, 0xD6, 0xF9, 0x00, 0x9C, 0x87, 0xB6, 0x59, 0xE1, 0xC9, 0x90, 0xEC, 0x98, 0x53,
    0x13, 0xD3, 0x93, 0x53, 0x12, 0x06, 0x6A, 0x7D, 0xB5, 0x8C, 0xB8, 0xF4, 0xFF, 0xCF, 0x5F, 0xAF,
    0xBE, 0xC2, 0xF5, 0xCD, 0xC4, 0x8F, 0x1F, 0x6E, 0xB1, 0x59, 0xE1, 0xC8, 0xC4, 0x90, 0xEB, 0xCA,
    0x5E, 0xE2, 0x95, 0xED, 0x64, 0xAF, 0xBE, 0xC1, 0x28, 0xA3, 0x23, 0xA3, 0x23, 0xA3, 0x23, 0xA2,
    0x55, 0xAD, 0x25, 0x3D, 0x74, 0x7F, 0x4F, 0xDE, 0x62, 0x16, 0x39, 0x40, 0xDC, 0xC7, 0xF7, 0x67,
    0x17, 0x06, 0x69, 0xB1, 0x58, 0x13, 0xD3, 0x93, 0x53, 0x13, 0xD2, 0xC5, 0x5C, 0x47, 0x77
])
# fmt: on
MDB1_MAGIC_VALUE = 0x3142444D
MDB1_CRYPTED_MAGIC_VALUE = 0x608D920C


def xor_decrypt(data: bytes, offset: int):
    result = bytearray(len(data))
    for i in range(len(data)):
        key1 = CRYPT_KEY_1[(offset + i) % 997]
        key2 = CRYPT_KEY_2[(offset + i) % 991]
        result[i] = data[i] ^ key1 ^ key2
    return bytes(result)


class MDB1Reader:
    def __init__(self, file_path: Path):
        self.file_path = file_path
        self.file = open(file_path, "rb")

        magic = struct.unpack("<I", self.file.read(4))[0]
        self.is_encrypted = (magic == MDB1_CRYPTED_MAGIC_VALUE)
        self.file.seek(0)

    def read(self, size: int) -> bytes:
        offset = self.file.tell()
        data = self.file.read(size)
        if self.is_encrypted:
            data = xor_decrypt(data, offset)
        return data

    def seek(self, offset: int, whence: int = 0):
        self.file.seek(offset, whence)

    def tell(self) -> int:
        return self.file.tell()

    def close(self):
        self.file.close()

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.close()


def extract_mdb1(archive_path: Path, output_dir: Path):
    with MDB1Reader(archive_path) as reader:
        header_data = reader.read(0x20)
        magic, file_entry_count, file_name_count, data_entry_count, data_start, total_size = struct.unpack("<IIIIQQ", header_data)

        if magic != MDB1_MAGIC_VALUE:
            print(f"Error: Invalid MDB1 magic value: 0x{magic:08X}")
            return

        file_entries = []
        for _ in range(file_entry_count):
            entry_data = reader.read(16)
            compare_bit, data_id, left, right = struct.unpack("<IIII", entry_data)
            file_entries.append((compare_bit, data_id, left, right))

        file_names = []
        for _ in range(file_name_count):
            name_data = reader.read(0x80)
            extension = name_data[0:4].decode("ascii", errors="ignore").rstrip()
            name = name_data[4:0x80].decode("ascii", errors="ignore").rstrip("\x00")

            if extension and name:
                file_path = name.replace("\\", os.sep) + "." + extension.strip()
                file_names.append(file_path)
            else:
                file_names.append(None)

        data_entries = []
        for _ in range(data_entry_count):
            entry_data = reader.read(0x18)
            offset, size, comp_size = struct.unpack("<QQQ", entry_data)
            data_entries.append((offset, size, comp_size))

        file_iterator = tqdm(enumerate(file_entries), total=len(file_entries), ncols=150)

        for i, (compare_bit, data_id, left, right) in file_iterator:
            if compare_bit == 0xFFFFFFFF or data_id == 0xFFFFFFFF:
                continue

            if data_id >= len(data_entries):
                continue

            if i >= len(file_names) or file_names[i] is None:
                continue

            file_path = file_names[i]
            offset, size, comp_size = data_entries[data_id]

            output_file = output_dir / file_path
            output_file.parent.mkdir(parents=True, exist_ok=True)

            reader.seek(data_start + offset)

            if comp_size == size:
                file_data = reader.read(size)
            else:
                compressed_data = reader.read(comp_size)
                file_data = lz4.block.decompress(compressed_data, uncompressed_size=size)

            with open(output_file, "wb") as f:
                f.write(file_data)


def process_directory(input_dir: Path):
    mvgl_files = list(input_dir.glob("**/*.mvgl"))

    if not mvgl_files:
        print(f"No .mvgl files found in {input_dir}")
        return

    print(f"Found {len(mvgl_files)} .mvgl file(s)")

    for mvgl_file in mvgl_files:
        output_dir = mvgl_file.parent / mvgl_file.stem
        extract_mdb1(mvgl_file, output_dir)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--indir", default=r"E:\VN\_tmp\2025_04\HUNDRED LINE -Saishuu Bouei Gakuen-\gamedata")

    args = parser.parse_args()

    input_path = Path(args.indir)

    if input_path.is_file():
        if input_path.suffix.lower() == ".mvgl":
            output_dir = input_path.parent / input_path.stem
            extract_mdb1(input_path, output_dir)
        else:
            print("Error: File must have .mvgl extension")
    elif input_path.is_dir():
        process_directory(input_path)
